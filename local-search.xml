<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>解决 Docker 在国内无法顺畅使用的问题</title>
    <link href="/2024/06/13/Solve-Docker-s-access-barriers/"/>
    <url>/2024/06/13/Solve-Docker-s-access-barriers/</url>
    
    <content type="html"><![CDATA[<blockquote><p>前段时间国内的 Docker Hub 加速缓存站在短时间内全部下线，为了仍然能在网络受限的环境下正常使用 Docker 的各项功能，我们需要修改 Docker 的部分配置文件，或使用来自「霍格沃茨」的能力闪现至长城之外……</p></blockquote><blockquote><p>本篇博文的首页封面图由 OpenAI DALL·E 生成。</p></blockquote><h2 id="怎么回事？"><a href="#怎么回事？" class="headerlink" title="怎么回事？"></a>怎么回事？</h2><p>让我们来回顾一下事件的全过程：</p><p>在2024年6月6日，上海交通大学 Linux 用户组 (SJTUG) 在其网站上发布了一条公告，通知使用了 SJTUG Docker Hub mirror 的用户迁移其服务。 <a href="https://sjtug.org/post/mirror-news/2024-06-06-takedown-dockerhub/">原始链接</a></p><center><img src="/2024/06/13/Solve-Docker-s-access-barriers/2024-06-06-SJTUG-Announce.png" class="" title="2024-06-06-上交大镜像站发布公告下架 Docker Hub 镜像站"><p>2024-06-06-上交大镜像站发布公告下架 Docker Hub 镜像站</center></p><p>同一天，中国科学技术大学开源软件镜像站也发出了同样的公告。 <a href="https://mirrors.ustc.edu.cn/help/dockerhub.html#_3">原始链接</a></p><center><img src="/2024/06/13/Solve-Docker-s-access-barriers/2024-06-06-USTC-Mirror-Announce.png" class="" title="2024-06-06-中科大镜像站发布公告关闭 Docker Hub 镜像缓存服务, GCR 与 Quay 不受影响"><p>2024-06-06-中科大镜像站发布公告关闭 Docker Hub 镜像缓存服务, GCR 与 Quay 不受影响</center></p><p>又过了一天，南京大学镜像站的 Docker Hub 缓存也下线。 <a href="https://doc.nju.edu.cn/books/35f4a">原始链接</a></p><center><img src="/2024/06/13/Solve-Docker-s-access-barriers/2024-06-07-NJU-Mirror-Alive.png" class="" title="2024-06-07-南大镜像站 Docker Hub 缓存正常运行"><p>2024-06-07-南大镜像站 Docker Hub 缓存正常运行</center></p><center><img src="/2024/06/13/Solve-Docker-s-access-barriers/2024-06-07-NJU-Mirror-Take-down.png" class="" title="2024-06-07-南大镜像站 Docker Hub 缓存消失"><p>2024-06-07-南大镜像站 Docker Hub 缓存消失</center></p><p>原百度 BCE 镜像也停止解析，至此，大陆地区所有可公开访问的 Docker Hub 镜像站均已下线。<br>经过在本地和 <code>itdog.cn</code> 上的测试，Docker 主站点和 Docker Hub 在国内均是无法直接访问的（DNS污染和SNI阻断）。</p><p>当然，即使镜像站消失了，Docker 全站也无法直连，<strong>但这不代表任务进行不下去，研究就可以不做了</strong>。</p><h2 id="那具体该怎么办呢？"><a href="#那具体该怎么办呢？" class="headerlink" title="那具体该怎么办呢？"></a>那具体该怎么办呢？</h2><p>解决方案有两种：</p><ul><li>为 Docker 配置<strong>海外缓存站</strong></li><li>给 Docker 使用云梯</li><li>自己建一个 Docker Hub 缓存站</li></ul><p>以下将对以上三种方法逐一介绍，难度按顺序由浅入深。</p><h3 id="为-Docker-配置海外缓存站"><a href="#为-Docker-配置海外缓存站" class="headerlink" title="为 Docker 配置海外缓存站"></a>为 Docker 配置海外缓存站</h3><p>这是最简单的一种办法，只需要少量修改就能用了</p><ol><li><p>根据<a href="https://docs.docker.com/config/daemon/#configuration-file">Docker 守护进程配置概述 - 配置文件</a>的表格，请依据自己的实际使用环境，编辑以下配置文件。</p><p> <em>文档中的表格内容翻译如下</em></p><table><thead><tr><th>操作系统和配置</th><th>文件位置</th></tr></thead><tbody><tr><td>Linux, regular setup (传统安装，Linux一般是这种)</td><td><code>/etc/docker/daemon.json</code></td></tr><tr><td>Linux, rootless mode (非特权模式)</td><td><code>~/.config/docker/daemon.json</code></td></tr><tr><td>Windows</td><td><code>C:\ProgramData\docker\config\daemon.json</code></td></tr></tbody></table><p> 此处以 <strong>Linux 传统安装</strong> 为例。</p><p> 用你喜欢的文本编辑器打开 <code>/etc/docker/daemon.json</code> ，文件不存在就新建文件，并将以下文本加入其中：</p> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JSON"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;registry-mirrors&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;https://docker.m.daocloud.io&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;https://huecker.io&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;https://dockerhub.timeweb.cloud&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;https://noohub.ru&quot;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p> 你也可以将你找到的缓存站加入以上列表。</p><p> 重启 docker engine：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">sudo systemctl daemon-reload<br>sudo systemctl restart docker<br></code></pre></td></tr></table></figure><p> 然后就可以正常拉取和推送镜像啦。😆</p></li></ol><h3 id="给-Docker-使用云梯"><a href="#给-Docker-使用云梯" class="headerlink" title="给 Docker 使用云梯"></a>给 Docker 使用云梯</h3><p><del><em>都会用 <code>Docker</code> 了该不会还没有云梯吧？不会吧不会吧…</em></del></p><p>Docker Engine 23.0 或以上版本可以经过以下几个步骤为 Docker 配置代理服务器：</p><ol><li><p>首先，检查 Docker Engine 版本。</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">sudo docker version<br></code></pre></td></tr></table></figure><p> 例如，我的 Docker Engine Server 版本为 24.0.7 </p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">...<br>Server: Docker Engine - Community<br>Engine:<br>Version:          24.0.7<br>API version:      1.43 (minimum version 1.12)<br>Go version:       go1.20.10<br>Git commit:       311b9ff<br>Built:            Thu Oct 26 09:08:02 2023<br>OS/Arch:          linux/amd64<br>Experimental:     false<br>...<br></code></pre></td></tr></table></figure><p> 由此可见，我的 Docker Engine 版本符合要求。</p></li><li><p>根据上一节的内容，用你喜欢的文本编辑器打开 Docker 守护进程的配置文件，文件不存在就新建文件，并将以下文本加入其中：</p> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JSON"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;proxies&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;http-proxy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http://&lt;你的代理服务器地址&gt;:&lt;代理服务器端口&gt;&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;https-proxy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http://&lt;你的代理服务器地址&gt;:&lt;代理服务器端口&gt;&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;no-proxy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;127.0.0.0/8,10.0.0.0/8,172.16.0.0/12,192.168.0.0/16,100.64.0.0/10,fd00::/8&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p> 这里配置了<code>no-proxy</code>用以忽略一些专用网络地址、链路本地地址和 localhost ，你可以根据自己的需求修改。</p><p> 其中 <code>http-proxy</code> 和 <code>http-proxy</code> 中填写的就是你对代理服务器地址，假设你使用的是 Clash 或类似软件，那么你应该填写为 <code>127.0.0.1:7890</code> ，具体的端口号不同的云梯程序会有所不同，你应该按照自己的实际情况修改。</p><p> 我的配置：</p> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JSON"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;proxies&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;http-proxy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http://127.0.0.1:7890&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;https-proxy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http://127.0.0.1:7890&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;no-proxy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;localhost,127.0.0.0/8,10.0.0.0/8,172.16.0.0/12,192.168.0.0/16,100.64.0.0/10,fd00::/8&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p> 保存文件并重启 Docker daemon：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">sudo systemctl restart docker.service<br></code></pre></td></tr></table></figure><p> 有人说，我的 Docker Engine 版本低于 23.0 怎么办😰，难道我要被抛弃了吗？😭<br> 当然不会，现今大部分用户使用的 Linux 发行版均将 systemd 作为默认的守护进程管理程序，因此按照 Docker 的官方文档<a href="https://docs.docker.com/config/daemon/systemd/">使用 systemd 配置守护进程</a>，我们还可以通过修改 systemd 服务文件的环境变量配置来配置代理的功能。</p><p> 首先，为 docker 服务创建一个 systemd 插入目录：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">sudo mkdir -p /etc/systemd/system/docker.service.d<br></code></pre></td></tr></table></figure><p> 创建一个名为 <code>/etc/systemd/system/docker.service.d/http-proxy.conf</code> 的文件，添加 <code>HTTP_PROXY</code> 环境变量：</p> <figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">[Service]</span><br><span class="hljs-attr">Environment</span>=<span class="hljs-string">&quot;HTTP_PROXY=http://&lt;你的代理服务器地址&gt;:&lt;代理服务器端口&gt;&quot;</span><br><span class="hljs-attr">Environment</span>=<span class="hljs-string">&quot;HTTPS_PROXY=https://&lt;你的代理服务器地址&gt;:&lt;代理服务器端口&gt;&quot;</span><br><span class="hljs-attr">Environment</span>=<span class="hljs-string">&quot;NO_PROXY=localhost,127.0.0.0/8,10.0.0.0/8,172.16.0.0/12,192.168.0.0/16,100.64.0.0/10,fd00::/8&quot;</span><br></code></pre></td></tr></table></figure><p> 然后刷新 systemd daemon 并重启 Docker Engine：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">sudo systemctl daemon-reload<br>sudo systemctl restart docker<br></code></pre></td></tr></table></figure></li><li><p>随便拉一个镜像试试：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs SHELL"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo docker pull mysql:8.0.37-bookworm</span><br>8.0.37-bookworm: Pulling from library/mysql<br>2cc3ae149d28: Pull complete<br>22d5d3c999e7: Pull complete<br>028261070555: Pull complete<br>90facb54927d: Pull complete<br>8ac805783dbd: Pull complete<br>f83473c07644: Pull complete<br>c7cf26312880: Pull complete<br>d829cc689d14: Pull complete<br>cb4001b741c1: Extracting  84.67MB/134.4MB<br>3662b243cb4a: Download complete<br>65a44116a5c5: Download complete<br>3b0138779dff: Download complete<br></code></pre></td></tr></table></figure><p> 可以正常拉取了，挺好。😜</p></li></ol><p><del><em>还没写完，先推送了，吃个饭再回来</em></del></p>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
      <tag>容器</tag>
      
      <tag>运维</tag>
      
      <tag>云梯</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一篇博客文章</title>
    <link href="/2024/06/13/Hello-World/"/>
    <url>/2024/06/13/Hello-World/</url>
    
    <content type="html"><![CDATA[<blockquote><p>没错，这是我的第一篇博文，给自己画了很久的饼终于在 2024-06-13 这天搓起来了。</p></blockquote><h3 id="Nice-抽空把博客折腾出来了🤩，开个-Blog-写写东西😋"><a href="#Nice-抽空把博客折腾出来了🤩，开个-Blog-写写东西😋" class="headerlink" title="Nice 抽空把博客折腾出来了🤩，开个 Blog 写写东西😋"></a>Nice 抽空把博客折腾出来了🤩，开个 Blog 写写东西😋</h3><p>这个可能会变成<del>垃圾堆</del>一样的博客终于在 2024-06-13 这天搓起来了。<br>以后或许会在这里写写折腾的随笔，学习记录，等等乱七八糟的玩意，作为一个 CS 专业的学生我觉得用 Blog 记录一些日常是挺不错的。</p><p>博客使用 Hexo 搭建，我觉得静态博客非常适合我这种<del>容易折腾炸</del>服务器的人<br>扔在 GitHub Pages 上，完全不用担心服务器稳不稳。<del>因此若 GitHub 或者 Cloudflare 炸了我的 Blog 也就炸了……</del></p><p>嗯，暂且先这样，等会继续研究一下 Hexo 和 Fluid Theme 怎么用。</p>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>折腾</tag>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
