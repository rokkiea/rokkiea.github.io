<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>使用 restic 备份 Minecraft 服务器</title>
    <link href="/2024/09/21/Backup-Minecraft-server-with-restic/"/>
    <url>/2024/09/21/Backup-Minecraft-server-with-restic/</url>
    
    <content type="html"><![CDATA[<blockquote><p>这已经是我数不清第几次开 Minecraft 私服了…这次准备使用更加完备的流程，尽可能地保障 Minecraft 服务器的数据安全</p></blockquote><h2 id="事情的起因"><a href="#事情的起因" class="headerlink" title="事情的起因"></a>事情的起因</h2><p><del>作为一个拥有 Java，iOS，Google Play，Windows 四平台正版的用户，一年不玩几次是不可能的</del></p><p>开过无数次 Minecraft 服务器了，依稀记得那第一次开私服是朋友在淘宝上买的，一个月30￥。那时候不懂什么配置什么插件什么存档备份乱七八糟的，只知道玩，并且<del>很高速移动</del>很卡。1.8 时代的我还是个毛小子啥也不懂。但是现在，趁着暑假买了个 OrangePi 5 Pro ，还给他做了个 3D 打印外壳，修改了几行 pwm-fan 的驱动使我买的 pwm 调速扇能正常工作。手里拿着一个 4 大核 + 4 小核的玩意怎么能不好好<del>压榨</del>利用一下呢，于是乎在这上面跑 Minecraft 服务器的念头便油然而生。</p><center><img src="/2024/09/21/Backup-Minecraft-server-with-restic/2024-09-21-OPI5PRO.jpg" class="" title="2024-09-21-我的 OrangePi 5 Pro"><p>2024-09-21-我的 OrangePi 5 Pro</center></p><p>这个单板计算机上搭载了一块性能还凑活<del>且非常灵车的</del>😜 NVME 硬盘：三星 PM991A，这是个只有店保的 OEM 硬盘。</p><p><del>65￥要什么自行车</del></p><p>为了磁盘读写性能，我把 Minecraft 服务器放在了这块硬盘上，而不是数据安全性可靠但是性能低下的 emmc 上。</p><h2 id="为乘坐-高-速-灵-车-的-Minecraft-服务器提供安全保障"><a href="#为乘坐-高-速-灵-车-的-Minecraft-服务器提供安全保障" class="headerlink" title="为乘坐 高 速 灵 车 的 Minecraft 服务器提供安全保障"></a>为乘坐 <del><em>高 速 灵 车</em></del> 的 Minecraft 服务器提供安全保障</h2><p>接下来要做的就是数据备份工作了，没有人都不想自己<del>当了那么长时间的帕鲁</del>撸了那么长时间的方块在一瞬间灰飞烟灭了吧。</p><p>首先明确一下本<del>灵车</del>服务器的定位：</p><ul><li>原版生电&#x2F;建筑向服务器</li><li>7*24 小时开放</li><li>每一小时至少备份一次</li><li>服务器开在家里，网络是普通的家庭宽带</li></ul><h3 id="选择备份工具"><a href="#选择备份工具" class="headerlink" title="选择备份工具"></a>选择备份工具</h3><h4 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h4><p>作为一个用 Hexo 写 blog 的家伙，首先想到的便是 Git。不过带着“ Git 是个源码版本控制软件，它适合备份二进制的 Minecraft 存档吗？”的疑问，去网上寻找答案。已知的是 Git 可以对二进制进行版本控制的，但是其似乎无法对二进制文件进行精细的差异比较，其检测到修改的处理方式就是将新版本直接复制一份到仓库中。</p><p>这种备份的方式实在是太不优雅了，Minecraft 的存档是非常多的分散小文件，而且每当在世界中进行大量的建筑工程时，游戏对区块数据修改是极其频繁。即使我去野外砍了一棵树，撸掉一个泥土方块，那么存储那个区块的文件便会发生变化，Git 就要完整地复制好几个MB的文件到新仓库。作为一个定位为生电和建筑的服务器，制造横跨数个区块的机器是家常便饭。而且由于玩家的时间分配并不那么自由，一台机器花好几天时间造完，甚至造了一半搁置半个月再造一半都是很有可能的。</p><p>可预见地，如果我是用 Git 对服务器进行备份，那么其体积膨胀速度会非常块。根据数据备份的 3-2-1 原则，我需要有两个存储介质和至少一份异地备份，<del>但是受限于财力不足无法严格遵守 3-2-1 原则，所以我还是只异地吧</del>。我需要在本地再准备一个足够大的空间，异地云端也要有一个足够大的空间，并且在向云端备份时会长期占用家中的互联网上行带宽。<del>就那 40 Mbps 小水管怎么够啊。</del></p><p>而且备份存档的目的是防止存档损坏丢失，版本追踪方便回档只是防止<del>机器忘记关导致崩服</del>，前者当然是更加重要的，对于后者，我也不需要保留如此多的版本，因为崩服很容易发现。</p><p>那么会有人说，你让 Git 删除旧 commit 不就好了？ Git 删除旧 commit 的过程十分繁琐，让一个菜鸡编写那样复杂的自动化脚本还是太困难了。而且删除了旧 commit 其仓库体积也不一定会变小多少。</p><p>Git 并不适用于我现在的场景，遂排除。</p><h4 id="restic"><a href="#restic" class="headerlink" title="restic"></a>restic</h4><p>在排除了 Git 之后，我便开始寻找其他的备份工具，我需要的是一个轻量易用的备份工具，只需要他能够“滚动”地备份多个版本，会自动对文件进行比较，无论是二进制还是文本，都可以进行字节级差异备份，即——只添加变化的部分。</p><p><strong><a href="https://restic.net/">restic</a> 是个不错的选择</strong></p><p>根据 restic 项目网站上的介绍，restic 支持许多不同的存储类型（甚至支持 rclone ），仅传输实际更改的部分，并且其备份仓库是加密的。</p><p>看上去非常适合我的需求，就你了！</p><h2 id="使用-restic-备份-Minecraft-服务器"><a href="#使用-restic-备份-Minecraft-服务器" class="headerlink" title="使用 restic 备份 Minecraft 服务器"></a>使用 restic 备份 Minecraft 服务器</h2><blockquote><p>注意，接下来的所有命令和操作均为演示用途，你需要将命令中的路径和各类名称修改为你当前的情况</p></blockquote><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>首先，需要在运行 Minecraft 服务端的系统上安装 restic，这一步很简单，官方文档的 <a href="https://restic.readthedocs.io/en/stable/020_installation.html">Installation</a> 提供了非常细致的指南。</p><p>在我部署 restic 时，其版本为 0.17.1 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs SHELL"><span class="hljs-meta prompt_">$ </span><span class="language-bash">restic version</span><br>restic 0.17.1 compiled with go1.23.1 on linux/arm64<br></code></pre></td></tr></table></figure><h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><p>接下来，我先为 Minecraft 服务器新建一个本地仓库。以下命令是初始化仓库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs COMMAND"># 使用 restic -r &lt;仓库的路径&gt; init 创建仓库 <br>restic -r mc-backup-test/ init<br></code></pre></td></tr></table></figure><p>我这里是在当前所在目录下的一个叫 <code>mc-backup-test</code> 的目录中创建仓库， restic 会将各种备份数据都存在这里。你可以建多个仓库，将他们各用作不同用途。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs SHELL"><span class="hljs-meta prompt_">$ </span><span class="language-bash">restic -r mc-backup-test/ init</span><br>enter password for new repository:<br>enter password again:<br>created restic repository 3e1d6ea315 at mc-backup-test/<br><br>Please note that knowledge of your password is required to access<br>the repository. Losing your password means that your data is<br>irrecoverably lost.<br></code></pre></td></tr></table></figure><p>restic 会提示你输入两次密码，一定要记住这个密码，否则后续别想对仓库进行任何操作（包括备份和恢复数据）。</p><h3 id="备份数据"><a href="#备份数据" class="headerlink" title="备份数据"></a>备份数据</h3><p>仓库创建后，备份就非常简单了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs COMMAND"># 使用 restic -r mc-backup-test/ backup ../../rokkiea/ mc-server-2024-rsync-copy/ 进行备份<br># 你可以在命令结尾添加 -v 或 -vv 参数获得更详细的信息<br>restic -r mc-backup-test/ backup ../../rokkiea/mc-server-2024-rsync-copy/<br></code></pre></td></tr></table></figure><p>restic 会显示当前备份的进度，文件数量，以及体积</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs SHELL"><span class="hljs-meta prompt_">$ </span><span class="language-bash">restic -r mc-backup-test/ backup ../../rokkiea/mc-server-2024-rsync-copy/</span><br>enter password for repository:<br>repository 3e1d6ea3 opened (version 2, compression level auto)<br>no parent snapshot found, will read all files<br>[0:00]          0 index files loaded<br><br>Files:         401 new,     0 changed,     0 unmodified<br>Dirs:           50 new,     0 changed,     0 unmodified<br>Added to the repository: 595.985 MiB (372.387 MiB stored)<br><br>processed 401 files, 595.760 MiB in 0:03<br>snapshot 3c9c2f25 saved<br></code></pre></td></tr></table></figure><p>提示 <code>snapshot 3c9c2f25 saved</code> ，这次备份就这样完成了</p><h4 id="排除不必要的文件"><a href="#排除不必要的文件" class="headerlink" title="排除不必要的文件"></a>排除不必要的文件</h4><p>不过，我的服务器中安装了 <a href="https://bluemap.bluecolored.de/">Bluemap</a> ，这是一个可以生成类似 Google Map 那样的卫星地图的插件，其渲染产生的文件非常巨大，而且更新极其频繁。反正 Bluemap 的渲染数据也是根据当前世界存档生成的，不备份也没关系，真崩了重新再渲染一份也无妨。</p><p>所以我们就要用到 restic 强大的排除文件功能了。restic 的文件排除功能基于路径名所以，我们需要根据要排除的文件的路径来编写规则。<br>例如我想要排除掉路径包含为 bluemap&#x2F; 的文件，则可以新建一个文本文件，写入以下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs TEXT">mc-server-2024/bluemap<br></code></pre></td></tr></table></figure><p>当然，服务端目录中还有许多无用的文件，你可以自行添加，其语法类似 <code>gitignore</code> 的写法，更多例子请参考官方文档 <a href="https://restic.readthedocs.io/en/stable/040_backup.html#excluding-files">Excluding Files</a> 。我的规则最终长这样：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs TEXT">mc-server-2024/libraries<br>mc-server-2024/cache<br>mc-server-2024/bluemap<br></code></pre></td></tr></table></figure><p>然后在备份时的命令后面加上参数 <code>--exclude-file=&quot;&lt;你的规则文件的路径&gt;&quot;</code> 即可。<br>现在命令变成了这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs COMMAND"># 在命令后方加入参数 --exclude-file=&quot;&lt;你的规则文件的路径&gt;&quot; 来指定排除文件列表<br>restic -r mc-backup-test/ backup ../../rokkiea/mc-server-2024-rsync-copy/ --exclude-file=&quot;./exclude-file.txt&quot; -vv<br></code></pre></td></tr></table></figure><p>仔细翻阅 restic 的输出日志，你会发现列表中列出来的文件和目录都没有被加入仓库。</p><h3 id="定时备份"><a href="#定时备份" class="headerlink" title="定时备份"></a>定时备份</h3><p>当然作为一个备份程序，让他能在规定的时间自动工作是必不可少的。<del>你那么喜欢手动运行备份我也拦不住你</del></p><p>restic 本身并未提供定时运行的方法，我们可以借助 <code>cron</code> 或 <code>systemd-timer</code> 等工具来定时运行备份<br>最简单的办法就是编写一个脚本，然后让以上两个工具定时帮你运行。</p>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-5d5d193e" role="button" aria-expanded="false" aria-controls="collapse-5d5d193e">        <div class="fold-arrow">▶</div>[点击释放] 很简单的手搓脚本      </div>      <div class="fold-collapse collapse" id="collapse-5d5d193e">        <div class="fold-content">          <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs BASH"><span class="hljs-comment"># 请将 /your/restic/repo/path 替换为你的 restic 仓库的路径</span><br><span class="hljs-built_in">export</span> RESTIC_REPOSITORY=/your/restic/repo/path<br><span class="hljs-comment"># 请将 yourpassword 替换为你的 restic 仓库密码</span><br><span class="hljs-built_in">export</span> RESTIC_PASSWORD=youpassword<br><span class="hljs-comment"># 请将 /your/mc/server/path 替换为你的 Minecraft 服务端所在路径</span><br><span class="hljs-built_in">export</span> MC_SERVER_PATH=/your/mc/server/path<br><span class="hljs-comment"># 请将 /your/restic/exclude/file/path 替换为你的 restic exclude-file 文件路径</span><br><span class="hljs-built_in">export</span> MC_BACKUP_RESTIC_EXCLUDE=/your/restic/exclude/file/path<br><br>restic backup <span class="hljs-string">&quot;<span class="hljs-variable">$MC_SERVER_PATH</span>&quot;</span> --exclude-file=<span class="hljs-string">&quot;<span class="hljs-variable">$MC_BACKUP_RESTIC_EXCLUDE</span>&quot;</span><br></code></pre></td></tr></table></figure>        </div>      </div>    </div><p>没错，restic 支持从环境变量中读取 仓库路径，仓库密码等信息，具体可以设置哪些环境变量，请看官方文档 <a href="https://restic.readthedocs.io/en/stable/040_backup.html#environment-variables">Environment Variables</a> 。</p><h3 id="从备份中恢复"><a href="#从备份中恢复" class="headerlink" title="从备份中恢复"></a>从备份中恢复</h3><p>当然了， restic 怎么可能只管备份呢。当数据发生丢失或损坏时，当务之急就是从备份中恢复数据。</p><p>首先查看仓库中的可用快照</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs COMMAND">restic -r mc-backup-test/ snapshots<br></code></pre></td></tr></table></figure><p>restic 会输出一个仓库中的所有快照的列表，包含了快照的 ID ，时间，主机，标签和备份的路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs SHELL"><span class="hljs-meta prompt_">$ </span><span class="language-bash">restic -r mc-backup-test/ snapshots</span><br>enter password for repository:<br>repository 3e1d6ea3 opened (version 2, compression level auto)<br>ID        Time                 Host          Tags        Paths                                                      Size<br>-------------------------------------------------------------------------------------------------------------------------------<br>3c9c2f25  2024-09-21 14:59:04  orangepi5pro              /media/nvme0/user-space/rokkiea/mc-server-2024-rsync-copy  595.760 MiB<br>-------------------------------------------------------------------------------------------------------------------------------<br>1 snapshots<br></code></pre></td></tr></table></figure><p>我们选择恢复快照 <code>3c9c2f25</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs COMMAND">restic -r mc-backup-test/ restore 3c9c2f25 --target ../../rokkiea/test/<br></code></pre></td></tr></table></figure><p>接下来你就可以去你指定的 <code>target</code> 目录中享用你的备份了。<br>restore 命令的更多使用方法也可以去官方文档 <a href="https://restic.readthedocs.io/en/stable/050_restore.html">Restoring from backup</a> 查看。</p><h3 id="删除旧的快照"><a href="#删除旧的快照" class="headerlink" title="删除旧的快照"></a>删除旧的快照</h3><p>restic 的 backup 命令只会向仓库中加入新的数据，而不会删除旧的数据。备份也是有期限的，过旧的快照应该被删除。<br>要在 restic 中删除一份快照一共需要两步。<br>例如我现在要删除快照 <code>3c9c2f25</code></p><ol><li><code>forget</code></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs COMMAND">restic -r mc-backup-test/ forget 3c9c2f25<br></code></pre></td></tr></table></figure><ol start="2"><li><code>prune</code></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs COMMAND">restic -r mc-backup-test/ prune<br></code></pre></td></tr></table></figure><p>当然以上两步可以合为一步</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs COMMAND">restic -r mc-backup-test/ forget 3c9c2f25 --prune<br></code></pre></td></tr></table></figure><p>不过手动删除也太麻烦了， restic 提供了一些内置的删除策略，我们可以直接用。<br>例如，我想只保留最近2160个版本，那么我就可以加上参数 <code>--keep-last 2160</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs COMMAND"># 使用 --keep-last 来自动删除过旧的快照<br>restic -r mc-backup-test/ forget --keep-last 2160 --prune<br></code></pre></td></tr></table></figure><p>还有很多其他的删除策略可用使用，以下不一一列举额，详情请看官方文档 <a href="https://restic.readthedocs.io/en/stable/060_forget.html#removing-snapshots-according-to-a-policy">Removing snapshots according to a policy</a> 。</p><h3 id="restic-远程备份"><a href="#restic-远程备份" class="headerlink" title="restic 远程备份"></a>restic 远程备份</h3><p>这里只讲了本地备份，根据上文提到的，我们还需要有一个远程备份。</p><p>restic 的文档中提到，它支持 REST Server 作为存储介质。</p><p>先挑选一个远程服务器，安装好 REST Server ，由于 REST Server 的安装不是本文的重点，故掠过。</p><p>我的方式是：在 REST Server 机器上和香橙派之间起一条 Wireguard-over-VLESS 隧道，因为隧道是加密的，我就无需为 REST Server 配置 SSL 证书了哈哈哈。<del>这个 Minecraft 服务器真是处处充满灵车的味道啊（</del></p><p>由于 restic 在使用 REST Server 作为存储截至时只有仓库名字不同，其他几乎完全一致，故不再详细介绍远程备份的使用。示例可以参考官方文档 <a href="https://restic.readthedocs.io/en/stable/030_preparing_a_new_repo.html#rest-server">REST Server</a> 。</p><p>PS: 在本文撰写结束时，我的 restic 备份已经稳定运行一周，产生了 170+ 个快照了。 restic 真香</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs TEXT">Stats in raw-data mode:<br>     Snapshots processed:  172<br>        Total Blob Count:  14888<br> Total Uncompressed Size:  4.419 GiB<br>              Total Size:  1.883 GiB<br>    Compression Progress:  100.00%<br>       Compression Ratio:  2.35x<br>Compression Space Saving:  57.39%<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>折腾</tag>
      
      <tag>运维</tag>
      
      <tag>Minecraft</tag>
      
      <tag>备份</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决 Docker 在国内无法顺畅使用的问题</title>
    <link href="/2024/06/13/Solve-Docker-s-access-barriers/"/>
    <url>/2024/06/13/Solve-Docker-s-access-barriers/</url>
    
    <content type="html"><![CDATA[<blockquote><p>前段时间国内的 Docker Hub 加速缓存站在短时间内全部下线，为了仍然能在网络受限的环境下正常使用 Docker 的各项功能，我们需要修改 Docker 的部分配置文件，或使用来自「霍格沃茨」的能力闪现至长城之外……</p></blockquote><blockquote><p>本篇博文的首页封面图由 OpenAI DALL·E 生成。</p></blockquote><h2 id="怎么回事？"><a href="#怎么回事？" class="headerlink" title="怎么回事？"></a>怎么回事？</h2><p>让我们来回顾一下事件的全过程：</p><p>在2024年6月6日，上海交通大学 Linux 用户组 (SJTUG) 在其网站上发布了一条公告，通知使用了 SJTUG Docker Hub mirror 的用户迁移其服务。 <a href="https://sjtug.org/post/mirror-news/2024-06-06-takedown-dockerhub/">原始链接</a></p><center><img src="/2024/06/13/Solve-Docker-s-access-barriers/2024-06-06-SJTUG-Announce.png" class="" title="2024-06-06-上交大镜像站发布公告下架 Docker Hub 镜像站"><p>2024-06-06-上交大镜像站发布公告下架 Docker Hub 镜像站</center></p><p>同一天，中国科学技术大学开源软件镜像站也发出了同样的公告。 <a href="https://mirrors.ustc.edu.cn/help/dockerhub.html#_3">原始链接</a></p><center><img src="/2024/06/13/Solve-Docker-s-access-barriers/2024-06-06-USTC-Mirror-Announce.png" class="" title="2024-06-06-中科大镜像站发布公告关闭 Docker Hub 镜像缓存服务, GCR 与 Quay 不受影响"><p>2024-06-06-中科大镜像站发布公告关闭 Docker Hub 镜像缓存服务, GCR 与 Quay 不受影响</center></p><p>又过了一天，南京大学镜像站的 Docker Hub 缓存也下线。 <a href="https://doc.nju.edu.cn/books/35f4a">原始链接</a></p><center><img src="/2024/06/13/Solve-Docker-s-access-barriers/2024-06-07-NJU-Mirror-Alive.png" class="" title="2024-06-07-南大镜像站 Docker Hub 缓存正常运行"><p>2024-06-07-南大镜像站 Docker Hub 缓存正常运行</center></p><center><img src="/2024/06/13/Solve-Docker-s-access-barriers/2024-06-07-NJU-Mirror-Take-down.png" class="" title="2024-06-07-南大镜像站 Docker Hub 缓存消失"><p>2024-06-07-南大镜像站 Docker Hub 缓存消失</center></p><p>原百度 BCE 镜像也停止解析，至此，大陆地区所有可公开访问的 Docker Hub 镜像站均已下线。<br>经过在本地和 <code>itdog.cn</code> 上的测试，Docker 主站点和 Docker Hub 在国内均是无法直接访问的（DNS污染和SNI阻断）。</p><p>当然，即使镜像站消失了，Docker 全站也无法直连，<strong>但这不代表任务进行不下去，研究就可以不做了</strong>。</p><h2 id="那具体该怎么办呢？"><a href="#那具体该怎么办呢？" class="headerlink" title="那具体该怎么办呢？"></a>那具体该怎么办呢？</h2><p>解决方案有两种：</p><ul><li><a href="#%E4%B8%BA-Docker-%E9%85%8D%E7%BD%AE%E6%B5%B7%E5%A4%96%E7%BC%93%E5%AD%98%E7%AB%99">为 Docker 配置海外缓存站</a></li><li><a href="#%E7%BB%99-Docker-%E4%BD%BF%E7%94%A8%E4%BA%91%E6%A2%AF">给 Docker 使用云梯</a></li><li><a href="#%E8%87%AA%E5%B7%B1%E5%BB%BA%E4%B8%80%E4%B8%AA-Docker-Hub-%E7%BC%93%E5%AD%98%E7%AB%99">自己建一个 Docker Hub 缓存站</a></li></ul><p>以下将对以上三种方法逐一介绍，难度按顺序由浅入深。</p><h3 id="为-Docker-配置海外缓存站"><a href="#为-Docker-配置海外缓存站" class="headerlink" title="为 Docker 配置海外缓存站"></a>为 Docker 配置海外缓存站</h3><p>这是最简单的一种办法，只需要少量修改就能用了</p><ol><li><p>根据<a href="https://docs.docker.com/config/daemon/#configuration-file">Docker 守护进程配置概述 - 配置文件</a>的表格，请依据自己的实际使用环境，编辑以下配置文件。</p><p> <em>文档中的表格内容翻译如下</em></p><table><thead><tr><th>操作系统和配置</th><th>文件位置</th></tr></thead><tbody><tr><td>Linux, regular setup (传统安装，Linux一般是这种)</td><td><code>/etc/docker/daemon.json</code></td></tr><tr><td>Linux, rootless mode (非特权模式)</td><td><code>~/.config/docker/daemon.json</code></td></tr><tr><td>Windows</td><td><code>C:\ProgramData\docker\config\daemon.json</code></td></tr></tbody></table><p> 此处以 <strong>Linux 传统安装</strong> 为例。</p><p> 用你喜欢的文本编辑器打开 <code>/etc/docker/daemon.json</code> ，文件不存在就新建文件，并将以下文本加入其中：</p> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JSON"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;registry-mirrors&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;https://docker.m.daocloud.io&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;https://huecker.io&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;https://dockerhub.timeweb.cloud&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;https://noohub.ru&quot;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p> 你也可以将你找到的缓存站加入以上列表。</p><p> 重启 docker engine：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">sudo systemctl daemon-reload<br>sudo systemctl restart docker<br></code></pre></td></tr></table></figure><p> 然后就可以正常拉取镜像啦。😆<br> 咱们来随便拉个mysql试试：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs SHELL"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo docker pull mysql:8.0.37-bookworm</span><br>8.0.37-bookworm: Pulling from library/mysql<br>2cc3ae149d28: Pull complete<br>22d5d3c999e7: Pull complete<br>028261070555: Pull complete<br>90facb54927d: Pull complete<br>8ac805783dbd: Pull complete<br>f83473c07644: Extracting  5.014MB<br>c7cf26312880: Download complete<br>d829cc689d14: Download complete<br>cb4001b741c1: Downloading   26.4MB<br>3662b243cb4a: Download complete<br>65a44116a5c5: Download complete<br>3b0138779dff: Download complete<br></code></pre></td></tr></table></figure> <div class="note note-warning">            <p>但是，这种方法有个许多缺点。例如，有些缓存站在海外，国内访问速度不佳；你无法对缓存站执行 <code>docker push</code> 操作；因为使用人数较多，缓存站也可能会有速率限制。所以本文更推荐接下来这种方法。</p>          </div></li></ol><h3 id="给-Docker-使用云梯"><a href="#给-Docker-使用云梯" class="headerlink" title="给 Docker 使用云梯"></a>给 Docker 使用云梯</h3><p><del><em>都会用 <code>Docker</code> 了该不会还没有云梯吧？不会吧不会吧…</em></del></p><p>Docker Engine 23.0 或以上版本可以经过以下几个步骤为 Docker 配置代理服务器：</p><ol><li><p>首先，检查 Docker Engine 版本。</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">sudo docker version<br></code></pre></td></tr></table></figure><p> 例如，我的 Docker Engine Server 版本为 26.1.4 </p> <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs TEXT">...<br>Server: Docker Engine - Community<br>Engine:<br>Version:          26.1.4<br>API version:      1.45 (minimum version 1.24)<br>Go version:       go1.21.11<br>Git commit:       de5c9cf<br>Built:            Wed Jun  5 11:29:22 2024<br>OS/Arch:          linux/amd64<br>Experimental:     false<br>...<br></code></pre></td></tr></table></figure><p> 由此可见，我的 Docker Engine 版本符合要求。</p></li><li><p>根据<a href="#%E4%B8%BA-Docker-%E9%85%8D%E7%BD%AE%E6%B5%B7%E5%A4%96%E7%BC%93%E5%AD%98%E7%AB%99">上一节</a>的内容，用你喜欢的文本编辑器打开 Docker 守护进程的配置文件，文件不存在就新建文件，并将以下文本（或其中的 <code>proxies</code> 配置）加入其中：</p> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JSON"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;proxies&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;http-proxy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http://&lt;你的代理服务器地址&gt;:&lt;代理服务器端口&gt;&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;https-proxy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http://&lt;你的代理服务器地址&gt;:&lt;代理服务器端口&gt;&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;no-proxy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;localhost,127.0.0.0/8,10.0.0.0/8,172.16.0.0/12,192.168.0.0/16,100.64.0.0/10,fd00::/8&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p> 这里配置了<code>no-proxy</code>用以忽略一些专用网络地址、链路本地地址和 localhost ，你可以根据自己的需求修改。</p><p> 其中 <code>http-proxy</code> 和 <code>http-proxy</code> 中填写的就是你对代理服务器地址，假设你使用的是 Clash 或类似软件，那么你应该填写为 <code>127.0.0.1:7890</code> ，具体的端口号不同的云梯程序会有所不同，你应该按照自己的实际情况修改。</p><p> 我的配置：</p> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JSON"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;proxies&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;http-proxy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http://127.0.0.1:7890&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;https-proxy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http://127.0.0.1:7890&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;no-proxy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;localhost,127.0.0.0/8,10.0.0.0/8,172.16.0.0/12,192.168.0.0/16,100.64.0.0/10,fd00::/8&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p> 保存文件并重启 Docker daemon：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">sudo systemctl restart docker.service<br></code></pre></td></tr></table></figure><p> 有人说，我的 Docker Engine 版本低于 23.0 怎么办😰，难道我要被抛弃了吗？😭<br> 当然不会，现今大部分用户使用的 Linux 发行版均将 systemd 作为默认的守护进程管理程序，因此按照 Docker 的官方文档<a href="https://docs.docker.com/config/daemon/systemd/">使用 systemd 配置守护进程</a>，我们还可以通过修改 systemd 服务文件的环境变量配置来配置代理的功能。</p><p> 首先，为 docker 服务创建一个 systemd 插入目录：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">sudo mkdir -p /etc/systemd/system/docker.service.d<br></code></pre></td></tr></table></figure><p> 创建一个名为 <code>/etc/systemd/system/docker.service.d/http-proxy.conf</code> 的文件，添加 <code>HTTP_PROXY</code> 环境变量：</p> <figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">[Service]</span><br><span class="hljs-attr">Environment</span>=<span class="hljs-string">&quot;HTTP_PROXY=http://&lt;你的代理服务器地址&gt;:&lt;代理服务器端口&gt;&quot;</span><br><span class="hljs-attr">Environment</span>=<span class="hljs-string">&quot;HTTPS_PROXY=https://&lt;你的代理服务器地址&gt;:&lt;代理服务器端口&gt;&quot;</span><br><span class="hljs-attr">Environment</span>=<span class="hljs-string">&quot;NO_PROXY=localhost,127.0.0.0/8,10.0.0.0/8,172.16.0.0/12,192.168.0.0/16,100.64.0.0/10,fd00::/8&quot;</span><br></code></pre></td></tr></table></figure><p> 然后刷新 systemd daemon 并重启 Docker Engine：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">sudo systemctl daemon-reload<br>sudo systemctl restart docker<br></code></pre></td></tr></table></figure></li><li><p>随便拉一个镜像试试：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs SHELL"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo docker pull mysql:8.0.37-bookworm</span><br>8.0.37-bookworm: Pulling from library/mysql<br>2cc3ae149d28: Pull complete<br>22d5d3c999e7: Pull complete<br>028261070555: Pull complete<br>90facb54927d: Pull complete<br>8ac805783dbd: Pull complete<br>f83473c07644: Pull complete<br>c7cf26312880: Pull complete<br>d829cc689d14: Pull complete<br>cb4001b741c1: Extracting  84.67MB/134.4MB<br>3662b243cb4a: Download complete<br>65a44116a5c5: Download complete<br>3b0138779dff: Download complete<br></code></pre></td></tr></table></figure><p> 可以正常拉取了，挺好。😜</p></li></ol><h3 id="自己建一个-Docker-Hub-缓存站"><a href="#自己建一个-Docker-Hub-缓存站" class="headerlink" title="自己建一个 Docker Hub 缓存站"></a>自己建一个 Docker Hub 缓存站</h3><p><del>若手里服务器比较多，这似乎也是个合理的利用方法</del>😏</p><p>如果在实验室里设备比较多，你又没有一个可用流量巨大的代理服务器时，第二种方法就会出现其局限性。<br>（而且实验室里的电脑不全是我们自己的，结果都挂上自己的云梯，那多多少少会有些合规性问题。<del>老师同意且支持当我没说</del>）</p><h4 id="利用-Cloudflare-Workers-建立反向代理"><a href="#利用-Cloudflare-Workers-建立反向代理" class="headerlink" title="利用 Cloudflare Workers 建立反向代理"></a>利用 Cloudflare Workers 建立反向代理</h4><p>这种方法只需要你拥有一个 Cloudflare 账号（免费版套餐即可）和一个域名。</p><p>简要步骤：</p><ol><li><p>登录到 <a href="https://dash.cloudflare.com/">Cloudflare 控制面板</a></p></li><li><p>依次点击左侧的 Workers &amp; Pages -&gt; Create Worker -&gt; 随便改个名字 -&gt; Save -&gt; Finish -&gt; Edit Code<br> 然后把下面的代码粘贴到左侧的编辑器里：</p>     <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-5bf6db73" role="button" aria-expanded="false" aria-controls="collapse-5bf6db73">        <div class="fold-arrow">▶</div>[点击释放] CF 反向代理的代码      </div>      <div class="fold-collapse collapse" id="collapse-5bf6db73">        <div class="fold-content">          <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-meta">&#x27;use strict&#x27;</span><br><br><span class="hljs-comment">// Docker镜像仓库主机地址</span><br><span class="hljs-keyword">const</span> hub_host = <span class="hljs-string">&#x27;registry-1.docker.io&#x27;</span><br><span class="hljs-comment">// Docker认证服务器地址</span><br><span class="hljs-keyword">const</span> auth_url = <span class="hljs-string">&#x27;https://auth.docker.io&#x27;</span><br><span class="hljs-comment">// 自定义的工作服务器地址</span><br><span class="hljs-keyword">let</span> workers_url = <span class="hljs-string">&#x27;https://你的域名&#x27;</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 静态文件 (404.html, sw.js, conf.js)</span><br><span class="hljs-comment">* ref: https://global.v2ex.com/t/1007922</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">/** <span class="hljs-doctag">@type</span> &#123;<span class="hljs-type">RequestInit</span>&#125; */</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">PREFLIGHT_INIT</span> = &#123;<br>    <span class="hljs-comment">// 预检请求配置</span><br>    <span class="hljs-attr">headers</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Headers</span>(&#123;<br>        <span class="hljs-string">&#x27;access-control-allow-origin&#x27;</span>: <span class="hljs-string">&#x27;*&#x27;</span>, <span class="hljs-comment">// 允许所有来源</span><br>        <span class="hljs-string">&#x27;access-control-allow-methods&#x27;</span>: <span class="hljs-string">&#x27;GET,POST,PUT,PATCH,TRACE,DELETE,HEAD,OPTIONS&#x27;</span>, <span class="hljs-comment">// 允许的HTTP方法</span><br>        <span class="hljs-string">&#x27;access-control-max-age&#x27;</span>: <span class="hljs-string">&#x27;1728000&#x27;</span>, <span class="hljs-comment">// 预检请求的缓存时间</span><br>    &#125;),<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 构造响应</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">any</span>&#125; body 响应体</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number</span>&#125; status 响应状态码</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">Object&lt;string, string&gt;</span>&#125; headers 响应头</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">makeRes</span>(<span class="hljs-params">body, status = <span class="hljs-number">200</span>, headers = &#123;&#125;</span>) &#123;<br>    headers[<span class="hljs-string">&#x27;access-control-allow-origin&#x27;</span>] = <span class="hljs-string">&#x27;*&#x27;</span> <span class="hljs-comment">// 允许所有来源</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Response</span>(body, &#123; status, headers &#125;) <span class="hljs-comment">// 返回新构造的响应</span><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 构造新的URL对象</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; urlStr URL字符串</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">newUrl</span>(<span class="hljs-params">urlStr</span>) &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title function_">URL</span>(urlStr) <span class="hljs-comment">// 尝试构造新的URL对象</span><br>    &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span> <span class="hljs-comment">// 构造失败返回null</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">isUUID</span>(<span class="hljs-params">uuid</span>) &#123;<br>    <span class="hljs-comment">// 定义一个正则表达式来匹配 UUID 格式</span><br>    <span class="hljs-keyword">const</span> uuidRegex = <span class="hljs-regexp">/^[0-9a-f]&#123;8&#125;-[0-9a-f]&#123;4&#125;-[4][0-9a-f]&#123;3&#125;-[89ab][0-9a-f]&#123;3&#125;-[0-9a-f]&#123;12&#125;$/i</span>;<br>    <br>    <span class="hljs-comment">// 使用正则表达式测试 UUID 字符串</span><br>    <span class="hljs-keyword">return</span> uuidRegex.<span class="hljs-title function_">test</span>(uuid);<br>&#125;<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">nginx</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> text = <span class="hljs-string">`</span><br><span class="hljs-string">    &lt;!DOCTYPE html&gt;</span><br><span class="hljs-string">    &lt;html&gt;</span><br><span class="hljs-string">    &lt;head&gt;</span><br><span class="hljs-string">    &lt;title&gt;Welcome to nginx!&lt;/title&gt;</span><br><span class="hljs-string">    &lt;style&gt;</span><br><span class="hljs-string">        body &#123;</span><br><span class="hljs-string">            width: 35em;</span><br><span class="hljs-string">            margin: 0 auto;</span><br><span class="hljs-string">            font-family: Tahoma, Verdana, Arial, sans-serif;</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    &lt;/style&gt;</span><br><span class="hljs-string">    &lt;/head&gt;</span><br><span class="hljs-string">    &lt;body&gt;</span><br><span class="hljs-string">    &lt;h1&gt;Welcome to nginx!&lt;/h1&gt;</span><br><span class="hljs-string">    &lt;p&gt;If you see this page, the nginx web server is successfully installed and</span><br><span class="hljs-string">    working. Further configuration is required.&lt;/p&gt;</span><br><span class="hljs-string">    </span><br><span class="hljs-string">    &lt;p&gt;For online documentation and support please refer to</span><br><span class="hljs-string">    &lt;a href=&quot;http://nginx.org/&quot;&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;</span><br><span class="hljs-string">    Commercial support is available at</span><br><span class="hljs-string">    &lt;a href=&quot;http://nginx.com/&quot;&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;</span><br><span class="hljs-string">    </span><br><span class="hljs-string">    &lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;</span><br><span class="hljs-string">    &lt;/body&gt;</span><br><span class="hljs-string">    &lt;/html&gt;</span><br><span class="hljs-string">    `</span><br>    <span class="hljs-keyword">return</span> text ;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-keyword">async</span> <span class="hljs-title function_">fetch</span>(<span class="hljs-params">request, env, ctx</span>) &#123;<br>        <span class="hljs-keyword">const</span> <span class="hljs-title function_">getReqHeader</span> = (<span class="hljs-params">key</span>) =&gt; request.<span class="hljs-property">headers</span>.<span class="hljs-title function_">get</span>(key); <span class="hljs-comment">// 获取请求头</span><br><br>        <span class="hljs-keyword">let</span> url = <span class="hljs-keyword">new</span> <span class="hljs-title function_">URL</span>(request.<span class="hljs-property">url</span>); <span class="hljs-comment">// 解析请求URL</span><br>        workers_url = <span class="hljs-string">`https://<span class="hljs-subst">$&#123;url.hostname&#125;</span>`</span>;<br>        <span class="hljs-keyword">const</span> pathname = url.<span class="hljs-property">pathname</span>;<br>        <span class="hljs-keyword">const</span> isUuid = <span class="hljs-title function_">isUUID</span>(pathname.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;/&#x27;</span>)[<span class="hljs-number">1</span>]);<br>        <br>        <span class="hljs-keyword">const</span> conditions = [<br>            isUuid,<br>            pathname.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;/_&#x27;</span>),<br>            pathname.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;/r&#x27;</span>),<br>            pathname.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;/v2/user&#x27;</span>),<br>            pathname.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;/v2/orgs&#x27;</span>),<br>            pathname.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;/v2/_catalog&#x27;</span>),<br>            pathname.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;/v2/categories&#x27;</span>),<br>            pathname.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;/v2/feature-flags&#x27;</span>),<br>            pathname.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;search&#x27;</span>),<br>            pathname.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;source&#x27;</span>),<br>            pathname === <span class="hljs-string">&#x27;/&#x27;</span>,<br>            pathname === <span class="hljs-string">&#x27;/favicon.ico&#x27;</span>,<br>            pathname === <span class="hljs-string">&#x27;/auth/profile&#x27;</span>,<br>        ];<br><br>        <span class="hljs-keyword">if</span> (conditions.<span class="hljs-title function_">some</span>(<span class="hljs-function"><span class="hljs-params">condition</span> =&gt;</span> condition)) &#123;<br>            <span class="hljs-keyword">if</span> (env.<span class="hljs-property">URL302</span>)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-title class_">Response</span>.<span class="hljs-title function_">redirect</span>(env.<span class="hljs-property">URL302</span>, <span class="hljs-number">302</span>);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (env.<span class="hljs-property">URL</span>)&#123;<br>                <span class="hljs-keyword">if</span> (env.<span class="hljs-property">URL</span>.<span class="hljs-title function_">toLowerCase</span>() == <span class="hljs-string">&#x27;nginx&#x27;</span>)&#123;<br>                    <span class="hljs-comment">//首页改成一个nginx伪装页</span><br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Response</span>(<span class="hljs-keyword">await</span> <span class="hljs-title function_">nginx</span>(), &#123;<br>                        <span class="hljs-attr">headers</span>: &#123;<br>                            <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;text/html; charset=UTF-8&#x27;</span>,<br>                        &#125;,<br>                    &#125;);<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-title function_">fetch</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Request</span>(env.<span class="hljs-property">URL</span>, request));<br>            &#125;<br>            <br>            <span class="hljs-keyword">const</span> newUrl = <span class="hljs-keyword">new</span> <span class="hljs-title function_">URL</span>(<span class="hljs-string">&quot;https://registry.hub.docker.com&quot;</span> + pathname + url.<span class="hljs-property">search</span>);<br><br>            <span class="hljs-comment">// 复制原始请求的标头</span><br>            <span class="hljs-keyword">const</span> headers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Headers</span>(request.<span class="hljs-property">headers</span>);<br><br>            <span class="hljs-comment">// 确保 Host 头部被替换为 hub.docker.com</span><br>            headers.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;Host&#x27;</span>, <span class="hljs-string">&#x27;registry.hub.docker.com&#x27;</span>);<br><br>            <span class="hljs-keyword">const</span> newRequest = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Request</span>(newUrl, &#123;<br>                    <span class="hljs-attr">method</span>: request.<span class="hljs-property">method</span>,<br>                    <span class="hljs-attr">headers</span>: headers,<br>                    <span class="hljs-attr">body</span>: request.<span class="hljs-property">method</span> !== <span class="hljs-string">&#x27;GET&#x27;</span> &amp;&amp; request.<span class="hljs-property">method</span> !== <span class="hljs-string">&#x27;HEAD&#x27;</span> ? <span class="hljs-keyword">await</span> request.<span class="hljs-title function_">blob</span>() : <span class="hljs-literal">null</span>,<br>                    <span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;follow&#x27;</span><br>            &#125;);<br><br>            <span class="hljs-keyword">return</span> <span class="hljs-title function_">fetch</span>(newRequest);<br>        &#125;<br><br>        <span class="hljs-comment">// 修改包含 %2F 和 %3A 的请求</span><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-regexp">/%2F/</span>.<span class="hljs-title function_">test</span>(url.<span class="hljs-property">search</span>) &amp;&amp; <span class="hljs-regexp">/%3A/</span>.<span class="hljs-title function_">test</span>(url.<span class="hljs-title function_">toString</span>())) &#123;<br>            <span class="hljs-keyword">let</span> modifiedUrl = url.<span class="hljs-title function_">toString</span>().<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/%3A(?=.*?&amp;)/</span>, <span class="hljs-string">&#x27;%3Alibrary%2F&#x27;</span>);<br>            url = <span class="hljs-keyword">new</span> <span class="hljs-title function_">URL</span>(modifiedUrl);<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`handle_url: <span class="hljs-subst">$&#123;url&#125;</span>`</span>)<br>        &#125;<br><br>        <span class="hljs-comment">// 处理token请求</span><br>        <span class="hljs-keyword">if</span> (url.<span class="hljs-property">pathname</span> === <span class="hljs-string">&#x27;/token&#x27;</span>) &#123;<br>            <span class="hljs-keyword">let</span> token_parameter = &#123;<br>                <span class="hljs-attr">headers</span>: &#123;<br>                    <span class="hljs-string">&#x27;Host&#x27;</span>: <span class="hljs-string">&#x27;auth.docker.io&#x27;</span>,<br>                    <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-title function_">getReqHeader</span>(<span class="hljs-string">&quot;User-Agent&quot;</span>),<br>                    <span class="hljs-string">&#x27;Accept&#x27;</span>: <span class="hljs-title function_">getReqHeader</span>(<span class="hljs-string">&quot;Accept&quot;</span>),<br>                    <span class="hljs-string">&#x27;Accept-Language&#x27;</span>: <span class="hljs-title function_">getReqHeader</span>(<span class="hljs-string">&quot;Accept-Language&quot;</span>),<br>                    <span class="hljs-string">&#x27;Accept-Encoding&#x27;</span>: <span class="hljs-title function_">getReqHeader</span>(<span class="hljs-string">&quot;Accept-Encoding&quot;</span>),<br>                    <span class="hljs-string">&#x27;Connection&#x27;</span>: <span class="hljs-string">&#x27;keep-alive&#x27;</span>,<br>                    <span class="hljs-string">&#x27;Cache-Control&#x27;</span>: <span class="hljs-string">&#x27;max-age=0&#x27;</span><br>                &#125;<br>            &#125;;<br>            <span class="hljs-keyword">let</span> token_url = auth_url + url.<span class="hljs-property">pathname</span> + url.<span class="hljs-property">search</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-title function_">fetch</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Request</span>(token_url, request), token_parameter)<br>        &#125;<br><br>        <span class="hljs-comment">// 修改 /v2/ 请求路径</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-regexp">/^\/v2\/[^/]+\/[^/]+\/[^/]+$/</span>.<span class="hljs-title function_">test</span>(url.<span class="hljs-property">pathname</span>) &amp;&amp; !<span class="hljs-regexp">/^\/v2\/library/</span>.<span class="hljs-title function_">test</span>(url.<span class="hljs-property">pathname</span>)) &#123;<br>            url.<span class="hljs-property">pathname</span> = url.<span class="hljs-property">pathname</span>.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\/v2\//</span>, <span class="hljs-string">&#x27;/v2/library/&#x27;</span>);<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`modified_url: <span class="hljs-subst">$&#123;url.pathname&#125;</span>`</span>)<br>        &#125;<br><br>        <span class="hljs-comment">// 更改请求的主机名</span><br>        url.<span class="hljs-property">hostname</span> = hub_host;<br><br>        <span class="hljs-comment">// 构造请求参数</span><br>        <span class="hljs-keyword">let</span> parameter = &#123;<br>            <span class="hljs-attr">headers</span>: &#123;<br>                <span class="hljs-string">&#x27;Host&#x27;</span>: hub_host,<br>                <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-title function_">getReqHeader</span>(<span class="hljs-string">&quot;User-Agent&quot;</span>),<br>                <span class="hljs-string">&#x27;Accept&#x27;</span>: <span class="hljs-title function_">getReqHeader</span>(<span class="hljs-string">&quot;Accept&quot;</span>),<br>                <span class="hljs-string">&#x27;Accept-Language&#x27;</span>: <span class="hljs-title function_">getReqHeader</span>(<span class="hljs-string">&quot;Accept-Language&quot;</span>),<br>                <span class="hljs-string">&#x27;Accept-Encoding&#x27;</span>: <span class="hljs-title function_">getReqHeader</span>(<span class="hljs-string">&quot;Accept-Encoding&quot;</span>),<br>                <span class="hljs-string">&#x27;Connection&#x27;</span>: <span class="hljs-string">&#x27;keep-alive&#x27;</span>,<br>                <span class="hljs-string">&#x27;Cache-Control&#x27;</span>: <span class="hljs-string">&#x27;max-age=0&#x27;</span><br>            &#125;,<br>            <span class="hljs-attr">cacheTtl</span>: <span class="hljs-number">3600</span> <span class="hljs-comment">// 缓存时间</span><br>        &#125;;<br><br>        <span class="hljs-comment">// 添加Authorization头</span><br>        <span class="hljs-keyword">if</span> (request.<span class="hljs-property">headers</span>.<span class="hljs-title function_">has</span>(<span class="hljs-string">&quot;Authorization&quot;</span>)) &#123;<br>            parameter.<span class="hljs-property">headers</span>.<span class="hljs-property">Authorization</span> = <span class="hljs-title function_">getReqHeader</span>(<span class="hljs-string">&quot;Authorization&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// 发起请求并处理响应</span><br>        <span class="hljs-keyword">let</span> original_response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Request</span>(url, request), parameter)<br>        <span class="hljs-keyword">let</span> original_response_clone = original_response.<span class="hljs-title function_">clone</span>();<br>        <span class="hljs-keyword">let</span> original_text = original_response_clone.<span class="hljs-property">body</span>;<br>        <span class="hljs-keyword">let</span> response_headers = original_response.<span class="hljs-property">headers</span>;<br>        <span class="hljs-keyword">let</span> new_response_headers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Headers</span>(response_headers);<br>        <span class="hljs-keyword">let</span> status = original_response.<span class="hljs-property">status</span>;<br><br>        <span class="hljs-comment">// 修改 Www-Authenticate 头</span><br>        <span class="hljs-keyword">if</span> (new_response_headers.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;Www-Authenticate&quot;</span>)) &#123;<br>            <span class="hljs-keyword">let</span> auth = new_response_headers.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;Www-Authenticate&quot;</span>);<br>            <span class="hljs-keyword">let</span> re = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(auth_url, <span class="hljs-string">&#x27;g&#x27;</span>);<br>            new_response_headers.<span class="hljs-title function_">set</span>(<span class="hljs-string">&quot;Www-Authenticate&quot;</span>, response_headers.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;Www-Authenticate&quot;</span>).<span class="hljs-title function_">replace</span>(re, workers_url));<br>        &#125;<br><br>        <span class="hljs-comment">// 处理重定向</span><br>        <span class="hljs-keyword">if</span> (new_response_headers.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;Location&quot;</span>)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-title function_">httpHandler</span>(request, new_response_headers.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;Location&quot;</span>))<br>        &#125;<br><br>        <span class="hljs-comment">// 返回修改后的响应</span><br>        <span class="hljs-keyword">let</span> response = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Response</span>(original_text, &#123;<br>            status,<br>            <span class="hljs-attr">headers</span>: new_response_headers<br>        &#125;)<br>        <span class="hljs-keyword">return</span> response;<br>    &#125;<br>&#125;;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 处理HTTP请求</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">Request</span>&#125; req 请求对象</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; pathname 请求路径</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">httpHandler</span>(<span class="hljs-params">req, pathname</span>) &#123;<br>    <span class="hljs-keyword">const</span> reqHdrRaw = req.<span class="hljs-property">headers</span><br><br>    <span class="hljs-comment">// 处理预检请求</span><br>    <span class="hljs-keyword">if</span> (req.<span class="hljs-property">method</span> === <span class="hljs-string">&#x27;OPTIONS&#x27;</span> &amp;&amp;<br>        reqHdrRaw.<span class="hljs-title function_">has</span>(<span class="hljs-string">&#x27;access-control-request-headers&#x27;</span>)<br>    ) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Response</span>(<span class="hljs-literal">null</span>, <span class="hljs-variable constant_">PREFLIGHT_INIT</span>)<br>    &#125;<br><br>    <span class="hljs-keyword">let</span> rawLen = <span class="hljs-string">&#x27;&#x27;</span><br><br>    <span class="hljs-keyword">const</span> reqHdrNew = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Headers</span>(reqHdrRaw)<br><br>    <span class="hljs-keyword">const</span> refer = reqHdrNew.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;referer&#x27;</span>)<br><br>    <span class="hljs-keyword">let</span> urlStr = pathname<br><br>    <span class="hljs-keyword">const</span> urlObj = <span class="hljs-title function_">newUrl</span>(urlStr)<br><br>    <span class="hljs-comment">/** <span class="hljs-doctag">@type</span> &#123;<span class="hljs-type">RequestInit</span>&#125; */</span><br>    <span class="hljs-keyword">const</span> reqInit = &#123;<br>        <span class="hljs-attr">method</span>: req.<span class="hljs-property">method</span>,<br>        <span class="hljs-attr">headers</span>: reqHdrNew,<br>        <span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;follow&#x27;</span>,<br>        <span class="hljs-attr">body</span>: req.<span class="hljs-property">body</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">proxy</span>(urlObj, reqInit, rawLen)<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 代理请求</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">URL</span>&#125; urlObj URL对象</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">RequestInit</span>&#125; reqInit 请求初始化对象</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; rawLen 原始长度</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">proxy</span>(<span class="hljs-params">urlObj, reqInit, rawLen</span>) &#123;<br>    <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(urlObj.<span class="hljs-property">href</span>, reqInit)<br>    <span class="hljs-keyword">const</span> resHdrOld = res.<span class="hljs-property">headers</span><br>    <span class="hljs-keyword">const</span> resHdrNew = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Headers</span>(resHdrOld)<br><br>    <span class="hljs-comment">// 验证长度</span><br>    <span class="hljs-keyword">if</span> (rawLen) &#123;<br>        <span class="hljs-keyword">const</span> newLen = resHdrOld.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;content-length&#x27;</span>) || <span class="hljs-string">&#x27;&#x27;</span><br>        <span class="hljs-keyword">const</span> badLen = (rawLen !== newLen)<br><br>        <span class="hljs-keyword">if</span> (badLen) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-title function_">makeRes</span>(res.<span class="hljs-property">body</span>, <span class="hljs-number">400</span>, &#123;<br>                <span class="hljs-string">&#x27;--error&#x27;</span>: <span class="hljs-string">`bad len: <span class="hljs-subst">$&#123;newLen&#125;</span>, except: <span class="hljs-subst">$&#123;rawLen&#125;</span>`</span>,<br>                <span class="hljs-string">&#x27;access-control-expose-headers&#x27;</span>: <span class="hljs-string">&#x27;--error&#x27;</span>,<br>            &#125;)<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">const</span> status = res.<span class="hljs-property">status</span><br>    resHdrNew.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;access-control-expose-headers&#x27;</span>, <span class="hljs-string">&#x27;*&#x27;</span>)<br>    resHdrNew.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;access-control-allow-origin&#x27;</span>, <span class="hljs-string">&#x27;*&#x27;</span>)<br>    resHdrNew.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;Cache-Control&#x27;</span>, <span class="hljs-string">&#x27;max-age=1500&#x27;</span>)<br><br>    <span class="hljs-comment">// 删除不必要的头</span><br>    resHdrNew.<span class="hljs-title function_">delete</span>(<span class="hljs-string">&#x27;content-security-policy&#x27;</span>)<br>    resHdrNew.<span class="hljs-title function_">delete</span>(<span class="hljs-string">&#x27;content-security-policy-report-only&#x27;</span>)<br>    resHdrNew.<span class="hljs-title function_">delete</span>(<span class="hljs-string">&#x27;clear-site-data&#x27;</span>)<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Response</span>(res.<span class="hljs-property">body</span>, &#123;<br>        status,<br>        <span class="hljs-attr">headers</span>: resHdrNew<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>        </div>      </div>    </div><p> <em>以上代码来自<a href="https://github.com/cmliu/CF-Workers-docker.io/">这里</a>，感谢作者开源</em></p></li><li><p>点击 Deploy</p></li><li><p>绑定域名<br> 点击 Settings -&gt; Triggers -&gt; Add Custom Domain ，里面填写你的域名，再次点击 Add Custom Domain<br> 等待你的域名初始化完毕，然后就可以试试能不能用啦。</p></li><li><p>用法很简单，把你的域名替换到<a href="#%E4%B8%BA-Docker-%E9%85%8D%E7%BD%AE%E6%B5%B7%E5%A4%96%E7%BC%93%E5%AD%98%E7%AB%99">为 Docker 配置海外缓存站</a>一节中的配置文件第一个即可。然后重启 Docker，Enjoy it!</p></li></ol><h4 id="利用-Nginx-反向代理"><a href="#利用-Nginx-反向代理" class="headerlink" title="利用 Nginx 反向代理"></a>利用 Nginx 反向代理</h4><p>这需要你有一台境外的服务器，并且 IP 归属地不是伊朗朝鲜或俄罗斯。你还需要有一个域名，并且要为这个域名签发证书。<br>这种直接反向代理会是否出现什么问题谁也不知道（</p><p><del><em>丑话在前：如果搞了这个，导致你的域名或者 IP 什么时候因为反代 Docker Hub 被 GFW 封了别找我</em></del></p><p>以下是一个示例 Nginx 配置，你可以按需修改：</p>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-c21ca059" role="button" aria-expanded="false" aria-controls="collapse-c21ca059">        <div class="fold-arrow">▶</div>[点击释放] Nginx 反向代理的代码      </div>      <div class="fold-collapse collapse" id="collapse-c21ca059">        <div class="fold-content">          <figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">server</span> <span class="hljs-string">&#123;</span><br>            <span class="hljs-attr">listen</span> <span class="hljs-string">443 ssl;</span><br>            <span class="hljs-attr">server_name</span> <span class="hljs-string">&lt;你的域名&gt;;</span><br><br>            <span class="hljs-attr">ssl_certificate</span> <span class="hljs-string">&lt;你的证书路径&gt;;</span><br>            <span class="hljs-attr">ssl_certificate_key</span> <span class="hljs-string">&lt;私钥路径&gt;;</span><br>            <span class="hljs-attr">ssl_session_timeout</span> <span class="hljs-string">1d;</span><br>            <span class="hljs-attr">ssl_session_cache</span> <span class="hljs-string">shared:MozSSL:10m;  # about 40000 sessions</span><br>            <span class="hljs-attr">ssl_session_tickets</span> <span class="hljs-string">off;</span><br><br>            <span class="hljs-attr">proxy_ssl_server_name</span> <span class="hljs-string">on; # 启用SNI</span><br><br>            <span class="hljs-attr">ssl_protocols</span> <span class="hljs-string">TLSv1.2 TLSv1.3;</span><br>            <span class="hljs-attr">ssl_ciphers</span> <span class="hljs-string">ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-CHACHA20-POLY1305;</span><br>            <span class="hljs-attr">ssl_prefer_server_ciphers</span> <span class="hljs-string">off;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">            # HSTS (ngx_http_headers_module is required) (63072000 seconds)</span><br><span class="hljs-comment">            # add_header Strict-Transport-Security &quot;max-age=63072000&quot; always;</span><br><br>            <span class="hljs-attr">location</span> <span class="hljs-string">/ &#123;</span><br>                    <span class="hljs-attr">proxy_pass</span> <span class="hljs-string">https://registry-1.docker.io;  # Docker Hub 的官方镜像仓库</span><br><br>                    <span class="hljs-attr">proxy_set_header</span> <span class="hljs-string">Host registry-1.docker.io;</span><br>                    <span class="hljs-attr">proxy_set_header</span> <span class="hljs-string">X-Real-IP $remote_addr;</span><br>                    <span class="hljs-attr">proxy_set_header</span> <span class="hljs-string">X-Forwarded-For $proxy_add_x_forwarded_for;</span><br>                    <span class="hljs-attr">proxy_set_header</span> <span class="hljs-string">X-Forwarded-Proto $scheme;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">                    # 关闭缓存</span><br>                    <span class="hljs-attr">proxy_buffering</span> <span class="hljs-string">off;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">                    # 转发认证相关的头部</span><br>                    <span class="hljs-attr">proxy_set_header</span> <span class="hljs-string">Authorization $http_authorization;</span><br>                    <span class="hljs-attr">proxy_pass_header</span>  <span class="hljs-string">Authorization;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">                    # 对 upstream 状态码检查，实现 error_page 错误重定向</span><br>                    <span class="hljs-attr">proxy_intercept_errors</span> <span class="hljs-string">on;</span><br><span class="hljs-comment">                    # error_page 指令默认只检查了第一次后端返回的状态码，开启后可以跟随多次重定向。</span><br>                    <span class="hljs-attr">recursive_error_pages</span> <span class="hljs-string">on;</span><br><span class="hljs-comment">                    # 根据状态码执行对应操作，以下为301、302、307状态码都会触发</span><br><span class="hljs-comment">                    #error_page 301 302 307 = @handle_redirect;</span><br><br>                    <span class="hljs-attr">error_page</span> <span class="hljs-string">429 = @handle_too_many_requests;</span><br>            <span class="hljs-attr">&#125;</span><br><span class="hljs-comment">            #处理重定向</span><br>            <span class="hljs-attr">location</span> <span class="hljs-string">@handle_redirect &#123;</span><br>                    <span class="hljs-attr">resolver</span> <span class="hljs-string">1.1.1.1;</span><br>                    <span class="hljs-attr">set</span> <span class="hljs-string">$saved_redirect_location &#x27;$upstream_http_location&#x27;;</span><br>                    <span class="hljs-attr">proxy_pass</span> <span class="hljs-string">$saved_redirect_location;</span><br>            <span class="hljs-attr">&#125;</span><br><span class="hljs-comment">            # 处理429错误</span><br>            <span class="hljs-attr">location</span> <span class="hljs-string">@handle_too_many_requests &#123;</span><br>                    <span class="hljs-attr">proxy_set_header</span> <span class="hljs-string">Host 替换为在CloudFlare Worker设置的域名;  # 替换为另一个服务器的地址</span><br>                    <span class="hljs-attr">proxy_pass</span> <span class="hljs-string">http://替换为在CloudFlare Worker设置的域名;</span><br>                    <span class="hljs-attr">proxy_set_header</span> <span class="hljs-string">Host $http_host;</span><br>            <span class="hljs-attr">&#125;</span><br>    <span class="hljs-attr">&#125;</span><br></code></pre></td></tr></table></figure>        </div>      </div>    </div><p>然后再按照<a href="#%E4%B8%BA-Docker-%E9%85%8D%E7%BD%AE%E6%B5%B7%E5%A4%96%E7%BC%93%E5%AD%98%E7%AB%99">为 Docker 配置海外缓存站</a>一节中的配置方法，将你自己的缓存加入列表中即可。</p><h2 id="差不多就这样"><a href="#差不多就这样" class="headerlink" title="差不多就这样"></a>差不多就这样</h2><p>当然，以上介绍的方法是比较常见的几种解决 Docker 使用障碍的办法，我自己使用的方法是为 Docker 配置代理服务器，这种方式最稳定快速，没有镜像站的无法使用推送功能的弊端，还不用担心缓存站因为负载过大失效导致无法拉起镜像的问题。</p><p>GitHub上也有非常多的自建 Mirror 的程序，也可以作为一种参考。</p>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
      <tag>容器</tag>
      
      <tag>运维</tag>
      
      <tag>云梯</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一篇博客文章</title>
    <link href="/2024/06/13/Hello-World/"/>
    <url>/2024/06/13/Hello-World/</url>
    
    <content type="html"><![CDATA[<blockquote><p>没错，这是我的第一篇博文，给自己画了很久的饼终于在 2024-06-13 这天搓起来了。</p></blockquote><h3 id="Nice-抽空把博客折腾出来了🤩，开个-Blog-写写东西😋"><a href="#Nice-抽空把博客折腾出来了🤩，开个-Blog-写写东西😋" class="headerlink" title="Nice 抽空把博客折腾出来了🤩，开个 Blog 写写东西😋"></a>Nice 抽空把博客折腾出来了🤩，开个 Blog 写写东西😋</h3><p>这个可能会变成<del>垃圾堆</del>一样的博客终于在 2024-06-13 这天搓起来了。<br>以后或许会在这里写写折腾的随笔，学习记录，等等乱七八糟的玩意，作为一个 CS 专业的学生我觉得用 Blog 记录一些日常是挺不错的。</p><p>博客使用 Hexo 搭建，我觉得静态博客非常适合我这种<del>容易折腾炸</del>服务器的人<br>扔在 GitHub Pages 上，完全不用担心服务器稳不稳。<del>因此若 GitHub 或者 Cloudflare 炸了我的 Blog 也就炸了……</del></p><p>嗯，暂且先这样，等会继续研究一下 Hexo 和 Fluid Theme 怎么用。</p>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>折腾</tag>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
